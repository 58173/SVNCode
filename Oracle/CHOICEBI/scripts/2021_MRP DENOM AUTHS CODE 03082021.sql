DROP TABLE MRP_DENOM_WO_EXCLUSIONS;

CREATE TABLE MRP_DENOM_WO_EXCLUSIONS AS
with NPI AS 
            ( SELECT DISTINCT A.PHYSICIAN_ID, B.NPI 
                   FROM CHOICE.FCT_UM_AUTH_PROVIDER@DLAKE  A 
                   LEFT JOIN CHOICE.DIM_PROVIDER@DLAKE B ON A.DL_PROVIDER_SK = B.DL_PROVIDER_SK 
               )

    /*PULL ALL APPROVED and CLOSED AUTHORIZATIONS*/    
        , AUTH_DETAILS AS 
        (
        --HHA/PCS/CDPAS Authorizations
        SELECT A.UNIQUE_ID ||' '|| TRUNC(A.SERVICE_TO_DATE) AS CONCAT_SUBSCRIBER_DC
             , M.MEMBER_ID, A.UNIQUE_ID AS SUBSCRIBER_ID
             , A.AUTH_ID , A.ALTERNATE_SERVICE_ID , A.DECISION_ID
             , A.PHYSICIAN_ID 
             , Z.NPI , A.PROVIDER_NAME
             , A.AUTH_TYPE_ID  , A.AUTH_TYPE_NAME
             , A.AUTH_STATUS  , A.DECISION_STATUS_DESC
             , A.AUTH_CREATED_ON , A.AUTH_UPDATED_ON
             , A.AUTH_CREATED_BY_NAME , A.UNIT_TYPE
             , A.AUTH_CODE_REF_NAME  , A.AUTH_CODE_REF_ID
             , A.SERVICE_DECISION_MODIFIER
             , A.AUTH_CODE_REF_ID || A.SERVICE_DECISION_MODIFIER AS CPT_CODE
             , TRUNC(A.SERVICE_FROM_DATE) AS SERVICE_FROM_DATE
             , TRUNC(A.SERVICE_TO_DATE) AS SERVICE_TO_DATE
             , TRUNC(A.SERVICE_TO_DATE) - TRUNC(A.SERVICE_FROM_DATE) + 1 AS DAYS_OF_SERVICE
             , A.CURRENT_REQUESTED , A.HOURS_X_DAYS
             , row_number() over (partition by A.UNIQUE_ID ||' '|| TRUNC(A.SERVICE_TO_DATE) order by A.AUTH_UPDATED_ON desc) as UNIQUE_AUTH  
        FROM CHOICEBI.V_AUTH_DATA A
        LEFT JOIN NPI Z ON (A.PHYSICIAN_ID = Z.PHYSICIAN_ID)
        LEFT JOIN (SELECT SBSB_ID, MEMBER_ID
                        , ROW_NUMBER() OVER (PARTITION BY SBSB_ID ORDER BY DL_UPD_TS DESC) AS SEQ
                   FROM CHOICE.DIM_MEMBER_DETAIL@DLAKE
                  ) M ON (A.UNIQUE_ID=M.SBSB_ID AND M.SEQ=1)
        WHERE UPPER(SUBSTR(A.UNIQUE_ID, 1, 1)) = 'V' --remove test cases
             AND A.AUTH_CODE_TYPE_ID != 2 --remove diagnosis auth lines
             AND A.AUTH_STATUS_ID IN (2, 6, 1, 7) --only include open, closed, closed and adjusted, 
             --AND A.DECISION_STATUS = 3 -- only include decisioned
        AND A.AUTH_TYPE_ID IN (1,73,2,75,3,78,76) 
        --INPATIENT ACUTE = 1, INPATIENT ACUTE REHAB = 73, INPATIENT SNF = 2, INPATIENT-RESPITE = 75, INPATIENT- LONG TERM CARE FACILITY = 3, INPATIENT - LTACH = 78, INPATIENT-SHORT-TERM CUSTODIAL = 76
        AND A.SERVICE_TO_DATE >= DATE'2021-01-01'
        AND Z.NPI <> 'UNKNOWN'

    ) 
,
INDEX_CASE AS
(
SELECT * FROM AUTH_DETAILS
)
,
ENROLLMENT AS
( 
SELECT M.*,
    row_number() over (partition by subscriber_id order by MONTH_ID desc, PROGRAM ASC) as LAST_MEMBER_MONTH
 FROM CHOICEBI.FACT_MEMBER_MONTH M
 WHERE DL_LOB_ID = 5
)
,
FIND_READMITS AS
(
SELECT A.*, B.AUTH_ID AS ORIGINAL_AUTH_ID, B.SERVICE_FROM_DATE AS ORIGINAL_ADMIT_DT, B.SERVICE_TO_DATE AS ORIGINAL_DC_DT
, CASE WHEN (A.SERVICE_FROM_DATE - B.SERVICE_TO_DATE) BETWEEN 0 AND 30 THEN 1
    ELSE 0
    END AS READMISSION_DC
, CASE WHEN B.AUTH_ID IS NULL THEN 1
    ELSE 0
    END AS INDEX_DC
, A.SERVICE_FROM_DATE - B.SERVICE_TO_DATE AS DAYS_TO_READMIT
, E.LINE_OF_BUSINESS, E.PROGRAM, E.ENROLLMENT_DATE,E.DISENROLLMENT_DATE,E.DISENROLLED_FLAG, (A.SERVICE_TO_DATE + 30) AS ENROLLMENT_MINIMUM_DT
, row_number() over (partition by A.CONCAT_SUBSCRIBER_DC order by (B.SERVICE_FROM_DATE - A.SERVICE_TO_DATE) ASC) as UNIQUE_READMIT
, row_number() over (partition by A.SUBSCRIBER_ID, B.AUTH_ID order by A.SERVICE_TO_DATE DESC, B.SERVICE_FROM_DATE ASC) as LAST_READMIT
FROM AUTH_DETAILS A
        INNER JOIN ENROLLMENT E ON A.subscriber_id = E.subscriber_id
        LEFT JOIN INDEX_CASE B ON (A.subscriber_id = B.SUBSCRIBER_ID AND A.SERVICE_FROM_DATE >= B.SERVICE_TO_DATE)
        WHERE E.LAST_MEMBER_MONTH = 1
        AND A.UNIQUE_AUTH = 1
        --AND E.DISENROLLMENT_DATE >= A.SERVICE_TO_DATE + 30
        AND A.AUTH_ID <> B.AUTH_ID
        AND A.SERVICE_FROM_DATE >= B.SERVICE_TO_DATE
        AND (A.SERVICE_FROM_DATE - B.SERVICE_TO_DATE) BETWEEN 0 AND 30
ORDER BY A.SUBSCRIBER_ID, A.SERVICE_TO_DATE DESC
)
,
FIND_INDEX
AS
(
SELECT A.*
, R.INDEX_DC, R.LAST_READMIT, R.READMISSION_DC, R.UNIQUE_READMIT
, CASE WHEN R.ORIGINAL_AUTH_ID IS NULL THEN A.AUTH_ID
    ELSE R.ORIGINAL_AUTH_ID
    END AS INDEX_AUTH_ID
, R.ORIGINAL_ADMIT_DT AS INDEX_ADMIT_DT, R.ORIGINAL_DC_DT AS INDEX_DC_DT
, E.LINE_OF_BUSINESS, E.PROGRAM, E.ENROLLMENT_DATE,E.DISENROLLMENT_DATE,E.DISENROLLED_FLAG, (A.SERVICE_TO_DATE + 30) AS ENROLLMENT_MINIMUM_DT 
FROM AUTH_DETAILS A
        INNER JOIN ENROLLMENT E ON A.subscriber_id = E.subscriber_id
        LEFT JOIN FIND_READMITS R ON A.CONCAT_SUBSCRIBER_DC = R.CONCAT_SUBSCRIBER_DC
        WHERE E.LAST_MEMBER_MONTH = 1
        AND A.UNIQUE_AUTH = 1
        --AND E.DISENROLLMENT_DATE >= A.SERVICE_TO_DATE + 30
        --AND A.SUBSCRIBER_ID = 'V70015435'
        AND (R.LAST_READMIT IS NULL OR R.LAST_READMIT = 1)
        AND (R.UNIQUE_READMIT IS NULL OR R.UNIQUE_READMIT = 1)
)
,
REMOVE_DUPS AS
(
SELECT
CONCAT_SUBSCRIBER_DC,
MEMBER_ID,
SUBSCRIBER_ID,
AUTH_ID,
ALTERNATE_SERVICE_ID,
DECISION_ID,
PHYSICIAN_ID,
NPI,
PROVIDER_NAME,
AUTH_TYPE_ID  ,
AUTH_TYPE_NAME, 
AUTH_STATUS  , 
DECISION_STATUS_DESC, 
AUTH_CREATED_ON , 
AUTH_UPDATED_ON, 
AUTH_CREATED_BY_NAME , 
UNIT_TYPE, 
AUTH_CODE_REF_NAME  ,
AUTH_CODE_REF_ID, 
SERVICE_DECISION_MODIFIER,
CPT_CODE,
SERVICE_FROM_DATE,
SERVICE_TO_DATE,
DAYS_OF_SERVICE,
CURRENT_REQUESTED ,
HOURS_X_DAYS,
INDEX_AUTH_ID,
INDEX_ADMIT_DT,
INDEX_DC_DT,
LINE_OF_BUSINESS,
PROGRAM,
ENROLLMENT_DATE,
DISENROLLMENT_DATE,
DISENROLLED_FLAG,
ENROLLMENT_MINIMUM_DT,
READMISSION_DC AS WITHIN_30_FROM_FIRST_INDEX,
UNIQUE_READMIT,
LAST_READMIT,
row_number() over (partition by SUBSCRIBER_ID, INDEX_AUTH_ID order by SERVICE_TO_DATE DESC) as REMOVE_INDEX
FROM FIND_INDEX
)
--SELECT * FROM REMOVE_DUPS
--WHERE MEMBER_ID = 117371
--;
,
FIND_CONT_READMIT AS
(
SELECT 
CONCAT_SUBSCRIBER_DC,
MEMBER_ID,
SUBSCRIBER_ID,
AUTH_ID,
ALTERNATE_SERVICE_ID,
DECISION_ID,
PHYSICIAN_ID,
NPI,
PROVIDER_NAME,
AUTH_TYPE_ID  ,
AUTH_TYPE_NAME, 
AUTH_STATUS  , 
DECISION_STATUS_DESC, 
AUTH_CREATED_ON , 
AUTH_UPDATED_ON, 
AUTH_CREATED_BY_NAME , 
UNIT_TYPE, 
AUTH_CODE_REF_NAME  ,
AUTH_CODE_REF_ID, 
SERVICE_DECISION_MODIFIER,
CPT_CODE,
SERVICE_FROM_DATE,
SERVICE_TO_DATE,
DAYS_OF_SERVICE,
CURRENT_REQUESTED ,
HOURS_X_DAYS,
INDEX_AUTH_ID,
INDEX_ADMIT_DT,
INDEX_DC_DT,
LINE_OF_BUSINESS,
PROGRAM,
ENROLLMENT_DATE,
DISENROLLMENT_DATE,
DISENROLLED_FLAG,
ENROLLMENT_MINIMUM_DT,
WITHIN_30_FROM_FIRST_INDEX,
row_number() over (partition by SUBSCRIBER_ID ORDER BY SERVICE_TO_DATE DESC) as CONT_READMIT
FROM REMOVE_DUPS
WHERE REMOVE_INDEX = 1
)
,
COMBINE_INDEX_1
AS
(
SELECT
A.CONCAT_SUBSCRIBER_DC,
A.MEMBER_ID,
A.SUBSCRIBER_ID,
A.AUTH_ID,
A.ALTERNATE_SERVICE_ID,
A.DECISION_ID,
A.PHYSICIAN_ID,
A.NPI,
A.PROVIDER_NAME,
A.AUTH_TYPE_ID  ,
A.AUTH_TYPE_NAME, 
A.AUTH_STATUS  , 
A.DECISION_STATUS_DESC, 
A.AUTH_CREATED_ON , 
A.AUTH_UPDATED_ON, 
A.AUTH_CREATED_BY_NAME , 
A.UNIT_TYPE, 
A.AUTH_CODE_REF_NAME  ,
A.AUTH_CODE_REF_ID, 
A.SERVICE_DECISION_MODIFIER,
A.CPT_CODE,
A.SERVICE_FROM_DATE,
A.SERVICE_TO_DATE,
A.DAYS_OF_SERVICE,
A.CURRENT_REQUESTED ,
A.HOURS_X_DAYS
, CASE WHEN A.INDEX_ADMIT_DT BETWEEN B.INDEX_DC_DT AND B.SERVICE_FROM_DATE THEN B.INDEX_AUTH_ID
    ELSE A.INDEX_AUTH_ID
    END AS INDEX_AUTH_ID
, CASE WHEN A.INDEX_ADMIT_DT BETWEEN B.INDEX_DC_DT AND B.SERVICE_FROM_DATE THEN B.INDEX_ADMIT_DT
    ELSE A.INDEX_ADMIT_DT
    END AS INDEX_ADMIT_DT
, CASE WHEN A.INDEX_ADMIT_DT BETWEEN B.INDEX_DC_DT AND B.SERVICE_FROM_DATE THEN B.INDEX_DC_DT
    ELSE A.INDEX_DC_DT
    END AS INDEX_DC_DT , 
A.LINE_OF_BUSINESS,
A.PROGRAM,
A.ENROLLMENT_DATE,
A.DISENROLLMENT_DATE,
A.DISENROLLED_FLAG,
A.ENROLLMENT_MINIMUM_DT,
A.WITHIN_30_FROM_FIRST_INDEX,
A.CONT_READMIT
FROM FIND_CONT_READMIT A
LEFT JOIN FIND_CONT_READMIT B ON (A.SUBSCRIBER_ID = B.SUBSCRIBER_ID) AND (B.CONT_READMIT = A.CONT_READMIT+1)
    --WHERE B.CONT_READMIT = (SELECT MAX(B.CONT_READMIT) FROM FIND_CONT_READMIT B)
ORDER BY SUBSCRIBER_ID, SERVICE_TO_DATE DESC
)
,
COMBINE_INDEX_2
AS
(
SELECT
A.CONCAT_SUBSCRIBER_DC,
A.MEMBER_ID,
A.SUBSCRIBER_ID,
A.AUTH_ID,
A.ALTERNATE_SERVICE_ID,
A.DECISION_ID,
A.PHYSICIAN_ID,
A.NPI,
A.PROVIDER_NAME,
A.AUTH_TYPE_ID  ,
A.AUTH_TYPE_NAME, 
A.AUTH_STATUS  , 
A.DECISION_STATUS_DESC, 
A.AUTH_CREATED_ON , 
A.AUTH_UPDATED_ON, 
A.AUTH_CREATED_BY_NAME , 
A.UNIT_TYPE, 
A.AUTH_CODE_REF_NAME  ,
A.AUTH_CODE_REF_ID, 
A.SERVICE_DECISION_MODIFIER,
A.CPT_CODE,
A.SERVICE_FROM_DATE,
A.SERVICE_TO_DATE,
A.DAYS_OF_SERVICE,
A.CURRENT_REQUESTED ,
A.HOURS_X_DAYS
, CASE WHEN A.INDEX_ADMIT_DT BETWEEN B.INDEX_DC_DT AND B.SERVICE_FROM_DATE THEN B.INDEX_AUTH_ID
    ELSE A.INDEX_AUTH_ID
    END AS INDEX_AUTH_ID
, CASE WHEN A.INDEX_ADMIT_DT BETWEEN B.INDEX_DC_DT AND B.SERVICE_FROM_DATE THEN B.INDEX_ADMIT_DT
    ELSE A.INDEX_ADMIT_DT
    END AS INDEX_ADMIT_DT
, CASE WHEN A.INDEX_ADMIT_DT BETWEEN B.INDEX_DC_DT AND B.SERVICE_FROM_DATE THEN B.INDEX_DC_DT
    ELSE A.INDEX_DC_DT
    END AS INDEX_DC_DT , 
A.LINE_OF_BUSINESS,
A.PROGRAM,
A.ENROLLMENT_DATE,
A.DISENROLLMENT_DATE,
A.DISENROLLED_FLAG,
A.ENROLLMENT_MINIMUM_DT,
A.WITHIN_30_FROM_FIRST_INDEX,
A.CONT_READMIT
FROM FIND_CONT_READMIT A
LEFT JOIN COMBINE_INDEX_1 B ON (A.SUBSCRIBER_ID = B.SUBSCRIBER_ID) AND (B.CONT_READMIT > A.CONT_READMIT)
ORDER BY SUBSCRIBER_ID, SERVICE_TO_DATE DESC
)
,
REMOVE_DUPS_FINAL AS
(
SELECT
CONCAT_SUBSCRIBER_DC,
MEMBER_ID,
SUBSCRIBER_ID,
AUTH_ID,
ALTERNATE_SERVICE_ID,
DECISION_ID,
PHYSICIAN_ID,
NPI,
PROVIDER_NAME,
AUTH_TYPE_ID  ,
AUTH_TYPE_NAME, 
AUTH_STATUS  , 
DECISION_STATUS_DESC, 
AUTH_CREATED_ON , 
AUTH_UPDATED_ON, 
AUTH_CREATED_BY_NAME , 
UNIT_TYPE, 
AUTH_CODE_REF_NAME  ,
AUTH_CODE_REF_ID, 
SERVICE_DECISION_MODIFIER,
CPT_CODE,
SERVICE_FROM_DATE,
SERVICE_TO_DATE,
DAYS_OF_SERVICE,
CURRENT_REQUESTED ,
HOURS_X_DAYS,
INDEX_AUTH_ID,
INDEX_ADMIT_DT,
INDEX_DC_DT,
LINE_OF_BUSINESS,
PROGRAM,
ENROLLMENT_DATE,
DISENROLLMENT_DATE,
DISENROLLED_FLAG,
ENROLLMENT_MINIMUM_DT,
WITHIN_30_FROM_FIRST_INDEX,
CONT_READMIT,
row_number() over (partition by SUBSCRIBER_ID, INDEX_AUTH_ID ORDER BY SERVICE_TO_DATE DESC) as REMOVE_DUP_AUTH,
row_number() over (partition by SUBSCRIBER_ID, SERVICE_TO_DATE ORDER BY INDEX_ADMIT_DT ASC) as UNIQUE_INDEX_AUTH
FROM COMBINE_INDEX_2
)
,
FINAL_MRP_DENOM AS
(
SELECT 
CONCAT_SUBSCRIBER_DC,
MEMBER_ID,
SUBSCRIBER_ID,
AUTH_ID,
ALTERNATE_SERVICE_ID,
DECISION_ID,
PHYSICIAN_ID,
NPI,
PROVIDER_NAME,
AUTH_TYPE_ID  ,
AUTH_TYPE_NAME, 
AUTH_STATUS  , 
DECISION_STATUS_DESC, 
AUTH_CREATED_ON , 
AUTH_UPDATED_ON, 
AUTH_CREATED_BY_NAME , 
UNIT_TYPE, 
AUTH_CODE_REF_NAME  ,
AUTH_CODE_REF_ID, 
SERVICE_DECISION_MODIFIER,
CPT_CODE,
SERVICE_FROM_DATE,
SERVICE_TO_DATE,
DAYS_OF_SERVICE,
CURRENT_REQUESTED ,
HOURS_X_DAYS,
INDEX_AUTH_ID,
INDEX_ADMIT_DT,
INDEX_DC_DT,
LINE_OF_BUSINESS,
PROGRAM,
ENROLLMENT_DATE,
DISENROLLMENT_DATE,
DISENROLLED_FLAG,
ENROLLMENT_MINIMUM_DT,
SERVICE_TO_DATE + 30 AS MED_REC_DUE_DATE
FROM REMOVE_DUPS_FINAL
WHERE REMOVE_DUP_AUTH = 1
AND UNIQUE_INDEX_AUTH = 1
)
,
/*patient_physician_id was removed from cmgc.member_service_interruption@nexus2 table after GC upgrade*/
SVC_INTERRUPT AS
   (
   select M.*, S.INTERRUPTION_ID, S.INTERRUPTION_TYPE, S.START_DT, S.END_DT, S.SVC_PRIORITY from 
   (
select 
        v.vpin, m.member_id
      , pt.unique_id as subscriber_id
      , msi.patient_id
      , it.interruption_id --HOSPICE = 7, NH - LONG TERM = 5, NH - SHORT-TERM = 6, CHHA = 4, HOSPITAL = 2
      , it.interruption as interruption_type
      , trunc(msi.start_date) as start_dt, TRUNC(msi.end_date) as end_dt
      , row_number() over (partition by pt.unique_id, it.interruption, TRUNC(msi.start_date) order by msi.is_active desc, TRUNC(msi.end_date) DESC) as dup_key
      , CASE WHEN it.interruption_id = 7 THEN 1
             WHEN it.interruption_id  = 5 THEN 2
             WHEN it.interruption_id = 6 THEN 3
             END AS SVC_PRIORITY
   from cmgc.member_service_interruption msi
   --inner join cmgc.patient_physician@nexus2 pp on (msi.patient_physician_id=pp.patient_physician_id  and pp.care_team_id=2 and pp.deleted_by is null and pp.deleted_on is null)
   --inner join cmgc.physician_demography@nexus2 pd on (pd.physician_id=pp.physician_id)
   --left join cmgc.provider_type@NEXUS2 pt on (pd.provider_type_id = pt.provider_type_id)
   inner join cmgc.service_interruption it on (it.interruption_id=msi.interruption_id)
   left join (select patient_details_id, client_patient_id, patient_id, unique_id, first_name, middle_name, last_name
              from cmgc.patient_details)  pt on (pt.patient_id = msi.patient_id and pt.unique_id is not null)
   left join choicebi.fact_member_month m ON (m.subscriber_id = pt.unique_id 
                                                 and m.dl_lob_id in (5) --and m.program in ('MLTC') 
                                                 and m.month_id = to_char(msi.start_date, 'YYYYMM'))
   left join cedl.vpin_memberid_xref@dlake v on (v.member_id = m.member_id )
   where 1=1
   --and auth_no is null 
   --and msi.patient_physician_id is not null
   AND it.INTERRUPTION_ID IN (7, 5, 6)
   ) S 
   INNER JOIN FINAL_MRP_DENOM M ON S.SUBSCRIBER_ID = M.SUBSCRIBER_ID AND (S.END_DT > M.SERVICE_TO_DATE OR S.END_DT IS NULL)
   where S.dup_key = 1
   and (S.end_dt IS NULL OR S.end_dt >= DATE'2021-01-01')
   AND ((S.START_DT BETWEEN M.SERVICE_TO_DATE AND M.MED_REC_DUE_DATE) OR (M.SERVICE_TO_DATE BETWEEN S.START_DT AND S.END_DT))
   ORDER BY M.CONCAT_SUBSCRIBER_DC, S.SVC_PRIORITY ASC
   )
--SELECT * FROM SVC_INTERRUPT
--WHERE SUBSCRIBER_ID IN ('V70000383','V70002976')
--;
,
EXPIRED_MEMBERS AS
(
SELECT M.*/*, D.MEMBER_ID, D.LOB, D.PROGRAM*/, D.DECEASED_DT, D.DISENROLL_RSN_CODE, D.REF_DISENROLLMENT_RSN_SK, R.DISENROLL_RSN_DESC, R.DISENROLL_REASON_TYPE, D.DL_ACTIVE_REC_IND
FROM CHOICE.DIM_MEMBER_DISENROLLMENT@DLAKE D
INNER JOIN CHOICE.REF_DISENROLLMENT_REASON@DLAKE R ON D.REF_DISENROLLMENT_RSN_SK = R.REF_DISENROLLMENT_RSN_SK
INNER JOIN FINAL_MRP_DENOM M ON D.MEMBER_ID = M.MEMBER_ID
WHERE D.DL_ACTIVE_REC_IND = 'Y'
AND D.DECEASED_DT >= DATE'2021-01-01'
AND (D.DECEASED_DT - M.SERVICE_TO_DATE) <= 30
)
--SELECT * FROM EXPIRED_MEMBERS
--;
,
AUTH_DX AS
(
SELECT M.*, A.AUTH_CODE_REF_ID AS DX_CODE, A.AUTH_CODE_REF_NAME AS DX_DESC
FROM CHOICEBI.V_AUTH_DATA A
INNER JOIN FINAL_MRP_DENOM M ON A.AUTH_ID = M.AUTH_ID
    WHERE A.AUTH_CODE_TYPE_ID = 2 --diagnosis auth line only
)
,
CM_PCP_MEMBER_INFO AS
(
SELECT M.*, A.MEMBER_NAME, A.DATE_OF_BIRTH, A.PROVIDER_ID AS PCP_PROVIDER_ID, A.PROVIDER_NAME AS PCP_PROVIDER_NAME, A.CM_NAME, A.CCM_NAME
FROM
(
SELECT A.MEMBER_ID AS ENROLL_MEMBER_ID, A.FIRST_NAME||' '||A.LAST_NAME AS MEMBER_NAME, A.DATE_OF_BIRTH, A.PROVIDER_ID, A.PROVIDER_NAME
       , trim(initcap(lower(trim(cm2.first_name))) || ' ' || initcap(lower(trim(cm2.last_name)))) as CM_NAME
       , trim(trim(ccm.first_name) || ' ' || trim(ccm.last_name)) as CCM_NAME
       , ROW_NUMBER () OVER(PARTITION BY A.MEMBER_ID ORDER BY A.MONTH_ID DESC) AS CM_SEQ
from 
CHOICEBI.FACT_MEMBER_MONTH A
   left join choice.dim_member_care_manager@DLAKE cm on(a.cm_sk_id=cm.cm_sk_id) 
   left join cmgc.care_staff_details cm2 on(cm.care_manager_id=cm2.member_id)
   left join cmgc.care_staff_details ccm on(cm2.assigned_to=ccm.member_id)
) A
INNER JOIN FINAL_MRP_DENOM M ON A.ENROLL_MEMBER_ID = M.MEMBER_ID
WHERE A.CM_SEQ = 1
)

,
PCP_PHONE_FAX AS 
(
SELECT DISTINCT
C.CONCAT_SUBSCRIBER_DC, C.PCP_PROVIDER_ID, C.PCP_PROVIDER_NAME
--B.PROVIDER_ADDRESS,    
--B.ADDRESS_EFF_DT,    
--B.ADDRESS_TERM_DT    
--,B.CITY    
--,B.STATE    
--,B.ZIPCODE    
--,B.COUNTY    
,B.PHONE    
,B.FAX    
--,B.DL_EFF_DATE    
--,B.DL_END_DATE
FROM
(
SELECT DISTINCT 
PROVIDER_ID,
NPI,
CASE WHEN ADDRESS_LINE_2 IS NULL THEN ADDRESS_LINE_1
     WHEN ADDRESS_LINE_3 IS NULL AND ADDRESS_LINE_2 IS NOT NULL THEN ADDRESS_LINE_1||', '||ADDRESS_LINE_2
     ELSE ADDRESS_LINE_1||', '||ADDRESS_LINE_2||', '||ADDRESS_LINE_3
     END AS PROVIDER_ADDRESS,
ADDRESS_EFF_DT,
ADDRESS_TERM_DT,
CITY,
STATE,
ZIPCODE,
COUNTY,
PHONE,
FAX,
DL_EFF_DATE,
DL_END_DATE,
ROW_NUMBER()OVER(PARTITION BY PROVIDER_ID ORDER BY DL_PROV_ADDR_SK DESC) AS ROWNUMBER 
FROM choice.DIM_PROVIDER_ADDRESS@dlake   
WHERE DL_END_DATE > SYSDATE
AND ADDRESS_TERM_DT > SYSDATE
AND DL_ACTIVE_REC_IND = 'Y'
AND ADDRESS_TYPE = 'S01'
--AND FAX IS NOT NULL
) B LEFT JOIN CM_PCP_MEMBER_INFO C on C.PCP_PROVIDER_ID = B.PROVIDER_ID
 WHERE B.ROWNUMBER = 1 
)
--select * from CM_PCP_MEMBER_INFO
--;
,
COMBINE_EXCLUSIONS AS
(
SELECT M.*
, C.MEMBER_NAME, C.DATE_OF_BIRTH, C.CM_NAME, C.CCM_NAME, P.PCP_PROVIDER_ID, P.PCP_PROVIDER_NAME, P.PHONE, P.FAX
, A.DX_CODE ||' - '|| A.DX_DESC AS ADMIT_DX
, S.interruption_id, S.interruption_type, S.start_dt AS SVC_INTERRUPT_START_DT, S.end_dt AS SVC_INTERRUPT_END_DT
, E.DECEASED_DT, E.DISENROLL_RSN_DESC,
CASE WHEN E.DECEASED_DT IS NOT NULL THEN 'EXPIRATION EXCLUSION'
     WHEN (interruption_id = 7 AND E.DECEASED_DT IS NULL) THEN 'HOSPICE EXCLUSION'
     WHEN (interruption_id = 5 AND E.DECEASED_DT IS NULL) THEN 'NH LONG-TERM EXCLUSION'
     WHEN (interruption_id = 6 AND E.DECEASED_DT IS NULL) THEN 'NH SHORT-TERM EXCLUSION'
     --WHEN E.DECEASED_DT - M.SERVICE_TO_DATE > 30 THEN 'MEMBER EXPIRED BUT NOT EXCLUDED'
     WHEN M.DISENROLLMENT_DATE < M.ENROLLMENT_MINIMUM_DT THEN 'MEMBER DISENROLLED WITHIN 30 DAYS'
     ELSE NULL
     END AS EXCLUSION_CRITERIA
, row_number() over (partition by M.SUBSCRIBER_ID, M.SERVICE_TO_DATE ORDER BY E.DECEASED_DT ASC NULLS LAST, S.SVC_PRIORITY ASC NULLS LAST) as UNIQUE_DC_EXCLUSION
FROM FINAL_MRP_DENOM M
LEFT JOIN SVC_INTERRUPT S ON M.CONCAT_SUBSCRIBER_DC = S.CONCAT_SUBSCRIBER_DC AND (S.END_DT > M.SERVICE_TO_DATE OR S.END_DT IS NULL) AND ((S.START_DT BETWEEN M.SERVICE_TO_DATE AND M.MED_REC_DUE_DATE) OR (M.SERVICE_TO_DATE BETWEEN S.START_DT AND S.END_DT))
LEFT JOIN EXPIRED_MEMBERS E ON M.CONCAT_SUBSCRIBER_DC = E.CONCAT_SUBSCRIBER_DC
LEFT JOIN AUTH_DX A ON M.CONCAT_SUBSCRIBER_DC = A.CONCAT_SUBSCRIBER_DC
LEFT JOIN CM_PCP_MEMBER_INFO C ON M.CONCAT_SUBSCRIBER_DC = C.CONCAT_SUBSCRIBER_DC
LEFT JOIN PCP_PHONE_FAX P ON M.CONCAT_SUBSCRIBER_DC = P.CONCAT_SUBSCRIBER_DC
)
,

FINAL_DENOM AS
(
SELECT
CONCAT_SUBSCRIBER_DC,
MEMBER_ID,
SUBSCRIBER_ID,
MEMBER_NAME, 
DATE_OF_BIRTH,
PCP_PROVIDER_ID,
PCP_PROVIDER_NAME, 
PHONE, 
FAX,
CM_NAME,
CCM_NAME,
ADMIT_DX,
AUTH_ID,
ALTERNATE_SERVICE_ID,
DECISION_ID,
PHYSICIAN_ID,
NPI,
PROVIDER_NAME,
AUTH_TYPE_ID  ,
AUTH_TYPE_NAME, 
AUTH_STATUS  , 
DECISION_STATUS_DESC, 
AUTH_CREATED_ON , 
AUTH_UPDATED_ON, 
AUTH_CREATED_BY_NAME, 
--UNIT_TYPE, 
--AUTH_CODE_REF_ID, 
--SERVICE_DECISION_MODIFIER,
CPT_CODE,
AUTH_CODE_REF_NAME AS CPT_DESC,
SERVICE_FROM_DATE,
SERVICE_TO_DATE,
--DAYS_OF_SERVICE,
--CURRENT_REQUESTED ,
--HOURS_X_DAYS,
INDEX_AUTH_ID,
INDEX_ADMIT_DT,
INDEX_DC_DT,
LINE_OF_BUSINESS,
PROGRAM,
ENROLLMENT_DATE,
DISENROLLMENT_DATE,
DISENROLLED_FLAG,
ENROLLMENT_MINIMUM_DT,
CASE WHEN (SVC_INTERRUPT_END_DT IS NOT NULL AND EXCLUSION_CRITERIA <> 'EXPIRATION EXCLUSION') THEN (SVC_INTERRUPT_END_DT + 30)
    ELSE MED_REC_DUE_DATE
    END AS MED_REC_DUE_DATE,
DECEASED_DT,
SVC_INTERRUPT_START_DT,
SVC_INTERRUPT_END_DT,
EXCLUSION_CRITERIA
FROM COMBINE_EXCLUSIONS
WHERE UNIQUE_DC_EXCLUSION = 1
)
SELECT
CONCAT_SUBSCRIBER_DC,
MEMBER_ID,
SUBSCRIBER_ID,
MEMBER_NAME, 
DATE_OF_BIRTH,
PCP_PROVIDER_ID,
PCP_PROVIDER_NAME, 
PHONE, 
FAX,
CM_NAME,
CCM_NAME,
ADMIT_DX,
AUTH_ID,
ALTERNATE_SERVICE_ID,
DECISION_ID,
PHYSICIAN_ID,
NPI,
PROVIDER_NAME,
AUTH_TYPE_ID  ,
AUTH_TYPE_NAME, 
AUTH_STATUS  , 
DECISION_STATUS_DESC, 
AUTH_CREATED_ON , 
AUTH_UPDATED_ON, 
AUTH_CREATED_BY_NAME, 
CPT_CODE,
CPT_DESC,
SERVICE_FROM_DATE,
SERVICE_TO_DATE,
INDEX_AUTH_ID,
INDEX_ADMIT_DT,
INDEX_DC_DT,
LINE_OF_BUSINESS,
PROGRAM,
ENROLLMENT_DATE,
DISENROLLMENT_DATE,
DISENROLLED_FLAG,
ENROLLMENT_MINIMUM_DT,
MED_REC_DUE_DATE,
CASE WHEN MED_REC_DUE_DATE - TRUNC(CURRENT_DATE) < 0 THEN NULL
     ELSE  MED_REC_DUE_DATE - TRUNC(CURRENT_DATE)
     END AS DAYS_UNTIL_DUE,
DECEASED_DT,
SVC_INTERRUPT_START_DT,
SVC_INTERRUPT_END_DT,
EXCLUSION_CRITERIA
FROM FINAL_DENOM
WHERE SUBSCRIBER_ID NOT IN ( SELECT SUBSCRIBER_ID FROM DW_OWNER.AUTH_EXCEPTION);


SELECT * FROM MRP_DENOM_WO_EXCLUSIONS



